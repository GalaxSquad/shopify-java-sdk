// Generated from graphql_java_gen gem

package com.sdk.shopify.shopify;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.shopify.graphql.support.AbstractResponse;
import com.shopify.graphql.support.ID;
import com.shopify.graphql.support.SchemaViolationError;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
* Comment events are generated by staff members of a shop.
* They are created when a staff member adds a comment to the timeline of an order, draft order,
* customer, or transfer.
*/
public class CommentEvent extends AbstractResponse<CommentEvent> implements Event, Node {
    public CommentEvent() {
    }

    public CommentEvent(JsonObject fields) throws SchemaViolationError {
        for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
            String key = field.getKey();
            String fieldName = getFieldName(key);
            switch (fieldName) {
                case "action": {
                    responseData.put(key, jsonAsString(field.getValue(), key));

                    break;
                }

                case "appTitle": {
                    String optional1 = null;
                    if (!field.getValue().isJsonNull()) {
                        optional1 = jsonAsString(field.getValue(), key);
                    }

                    responseData.put(key, optional1);

                    break;
                }

                case "attachments": {
                    List<CommentEventAttachment> list1 = new ArrayList<>();
                    for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                        list1.add(new CommentEventAttachment(jsonAsObject(element1, key)));
                    }

                    responseData.put(key, list1);

                    break;
                }

                case "attributeToApp": {
                    responseData.put(key, jsonAsBoolean(field.getValue(), key));

                    break;
                }

                case "attributeToUser": {
                    responseData.put(key, jsonAsBoolean(field.getValue(), key));

                    break;
                }

                case "author": {
                    responseData.put(key, new StaffMember(jsonAsObject(field.getValue(), key)));

                    break;
                }

                case "canDelete": {
                    responseData.put(key, jsonAsBoolean(field.getValue(), key));

                    break;
                }

                case "canEdit": {
                    responseData.put(key, jsonAsBoolean(field.getValue(), key));

                    break;
                }

                case "createdAt": {
                    responseData.put(key, jsonAsString(field.getValue(), key));

                    break;
                }

                case "criticalAlert": {
                    responseData.put(key, jsonAsBoolean(field.getValue(), key));

                    break;
                }

                case "edited": {
                    responseData.put(key, jsonAsBoolean(field.getValue(), key));

                    break;
                }

                case "embed": {
                    CommentEventEmbed optional1 = null;
                    if (!field.getValue().isJsonNull()) {
                        optional1 = UnknownCommentEventEmbed.create(jsonAsObject(field.getValue(), key));
                    }

                    responseData.put(key, optional1);

                    break;
                }

                case "id": {
                    responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                    break;
                }

                case "message": {
                    responseData.put(key, jsonAsString(field.getValue(), key));

                    break;
                }

                case "rawMessage": {
                    responseData.put(key, jsonAsString(field.getValue(), key));

                    break;
                }

                case "subject": {
                    CommentEventSubject optional1 = null;
                    if (!field.getValue().isJsonNull()) {
                        optional1 = UnknownCommentEventSubject.create(jsonAsObject(field.getValue(), key));
                    }

                    responseData.put(key, optional1);

                    break;
                }

                case "__typename": {
                    responseData.put(key, jsonAsString(field.getValue(), key));
                    break;
                }
                default: {
                    throw new SchemaViolationError(this, key, field.getValue());
                }
            }
        }
    }

    public CommentEvent(ID id) {
        this();
        optimisticData.put("id", id);
    }

    public String getGraphQlTypeName() {
        return "CommentEvent";
    }

    /**
    * The action that occured.
    */

    public String getAction() {
        return (String) get("action");
    }

    public CommentEvent setAction(String arg) {
        optimisticData.put(getKey("action"), arg);
        return this;
    }

    /**
    * The name of the app that created the event.
    */

    public String getAppTitle() {
        return (String) get("appTitle");
    }

    public CommentEvent setAppTitle(String arg) {
        optimisticData.put(getKey("appTitle"), arg);
        return this;
    }

    /**
    * The attachments associated with the comment event.
    */

    public List<CommentEventAttachment> getAttachments() {
        return (List<CommentEventAttachment>) get("attachments");
    }

    public CommentEvent setAttachments(List<CommentEventAttachment> arg) {
        optimisticData.put(getKey("attachments"), arg);
        return this;
    }

    /**
    * Whether the event was created by an app.
    */

    public Boolean getAttributeToApp() {
        return (Boolean) get("attributeToApp");
    }

    public CommentEvent setAttributeToApp(Boolean arg) {
        optimisticData.put(getKey("attributeToApp"), arg);
        return this;
    }

    /**
    * Whether the event was caused by an admin user.
    */

    public Boolean getAttributeToUser() {
        return (Boolean) get("attributeToUser");
    }

    public CommentEvent setAttributeToUser(Boolean arg) {
        optimisticData.put(getKey("attributeToUser"), arg);
        return this;
    }

    /**
    * The name of the user that authored the comment event.
    */

    public StaffMember getAuthor() {
        return (StaffMember) get("author");
    }

    public CommentEvent setAuthor(StaffMember arg) {
        optimisticData.put(getKey("author"), arg);
        return this;
    }

    /**
    * Whether the comment event can be deleted. If true, then the comment event can be deleted.
    */

    public Boolean getCanDelete() {
        return (Boolean) get("canDelete");
    }

    public CommentEvent setCanDelete(Boolean arg) {
        optimisticData.put(getKey("canDelete"), arg);
        return this;
    }

    /**
    * Whether the comment event can be edited. If true, then the comment event can be edited.
    */

    public Boolean getCanEdit() {
        return (Boolean) get("canEdit");
    }

    public CommentEvent setCanEdit(Boolean arg) {
        optimisticData.put(getKey("canEdit"), arg);
        return this;
    }

    /**
    * The date and time when the event was created.
    */

    public String getCreatedAt() {
        return (String) get("createdAt");
    }

    public CommentEvent setCreatedAt(String arg) {
        optimisticData.put(getKey("createdAt"), arg);
        return this;
    }

    /**
    * Whether the event is critical.
    */

    public Boolean getCriticalAlert() {
        return (Boolean) get("criticalAlert");
    }

    public CommentEvent setCriticalAlert(Boolean arg) {
        optimisticData.put(getKey("criticalAlert"), arg);
        return this;
    }

    /**
    * Whether the comment event has been edited. If true, then the comment event has been edited.
    */

    public Boolean getEdited() {
        return (Boolean) get("edited");
    }

    public CommentEvent setEdited(Boolean arg) {
        optimisticData.put(getKey("edited"), arg);
        return this;
    }

    /**
    * The object reference associated with the comment event. For example, a product or discount).
    */

    public CommentEventEmbed getEmbed() {
        return (CommentEventEmbed) get("embed");
    }

    public CommentEvent setEmbed(CommentEventEmbed arg) {
        optimisticData.put(getKey("embed"), arg);
        return this;
    }

    /**
    * A globally-unique ID.
    */

    public ID getId() {
        return (ID) get("id");
    }

    /**
    * Human readable text that describes the event.
    */

    public String getMessage() {
        return (String) get("message");
    }

    public CommentEvent setMessage(String arg) {
        optimisticData.put(getKey("message"), arg);
        return this;
    }

    /**
    * The raw body of the comment event.
    */

    public String getRawMessage() {
        return (String) get("rawMessage");
    }

    public CommentEvent setRawMessage(String arg) {
        optimisticData.put(getKey("rawMessage"), arg);
        return this;
    }

    /**
    * The parent subject to which the comment event belongs.
    */

    public CommentEventSubject getSubject() {
        return (CommentEventSubject) get("subject");
    }

    public CommentEvent setSubject(CommentEventSubject arg) {
        optimisticData.put(getKey("subject"), arg);
        return this;
    }

    public boolean unwrapsToObject(String key) {
        switch (getFieldName(key)) {
            case "action": return false;

            case "appTitle": return false;

            case "attachments": return true;

            case "attributeToApp": return false;

            case "attributeToUser": return false;

            case "author": return true;

            case "canDelete": return false;

            case "canEdit": return false;

            case "createdAt": return false;

            case "criticalAlert": return false;

            case "edited": return false;

            case "embed": return false;

            case "id": return false;

            case "message": return false;

            case "rawMessage": return false;

            case "subject": return false;

            default: return false;
        }
    }
}

