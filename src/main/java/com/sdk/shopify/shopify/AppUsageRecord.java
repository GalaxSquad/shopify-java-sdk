// Generated from graphql_java_gen gem

package com.sdk.shopify.shopify;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.shopify.graphql.support.AbstractResponse;
import com.shopify.graphql.support.ID;
import com.shopify.graphql.support.SchemaViolationError;
import java.util.Map;

/**
* Store usage for app subscriptions with usage pricing.
*/
public class AppUsageRecord extends AbstractResponse<AppUsageRecord> implements Node {
    public AppUsageRecord() {
    }

    public AppUsageRecord(JsonObject fields) throws SchemaViolationError {
        for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
            String key = field.getKey();
            String fieldName = getFieldName(key);
            switch (fieldName) {
                case "createdAt": {
                    responseData.put(key, jsonAsString(field.getValue(), key));

                    break;
                }

                case "description": {
                    responseData.put(key, jsonAsString(field.getValue(), key));

                    break;
                }

                case "id": {
                    responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                    break;
                }

                case "idempotencyKey": {
                    String optional1 = null;
                    if (!field.getValue().isJsonNull()) {
                        optional1 = jsonAsString(field.getValue(), key);
                    }

                    responseData.put(key, optional1);

                    break;
                }

                case "price": {
                    responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                    break;
                }

                case "subscriptionLineItem": {
                    responseData.put(key, new AppSubscriptionLineItem(jsonAsObject(field.getValue(), key)));

                    break;
                }

                case "__typename": {
                    responseData.put(key, jsonAsString(field.getValue(), key));
                    break;
                }
                default: {
                    throw new SchemaViolationError(this, key, field.getValue());
                }
            }
        }
    }

    public AppUsageRecord(ID id) {
        this();
        optimisticData.put("id", id);
    }

    public String getGraphQlTypeName() {
        return "AppUsageRecord";
    }

    /**
    * The date and time when the usage record was created.
    */

    public String getCreatedAt() {
        return (String) get("createdAt");
    }

    public AppUsageRecord setCreatedAt(String arg) {
        optimisticData.put(getKey("createdAt"), arg);
        return this;
    }

    /**
    * The description of the app usage record.
    */

    public String getDescription() {
        return (String) get("description");
    }

    public AppUsageRecord setDescription(String arg) {
        optimisticData.put(getKey("description"), arg);
        return this;
    }

    /**
    * A globally-unique ID.
    */

    public ID getId() {
        return (ID) get("id");
    }

    /**
    * A unique key generated by the client to avoid duplicate charges.
    */

    public String getIdempotencyKey() {
        return (String) get("idempotencyKey");
    }

    public AppUsageRecord setIdempotencyKey(String arg) {
        optimisticData.put(getKey("idempotencyKey"), arg);
        return this;
    }

    /**
    * The price of the usage record.
    */

    public MoneyV2 getPrice() {
        return (MoneyV2) get("price");
    }

    public AppUsageRecord setPrice(MoneyV2 arg) {
        optimisticData.put(getKey("price"), arg);
        return this;
    }

    /**
    * Defines the usage pricing plan the merchant is subscribed to.
    */

    public AppSubscriptionLineItem getSubscriptionLineItem() {
        return (AppSubscriptionLineItem) get("subscriptionLineItem");
    }

    public AppUsageRecord setSubscriptionLineItem(AppSubscriptionLineItem arg) {
        optimisticData.put(getKey("subscriptionLineItem"), arg);
        return this;
    }

    public boolean unwrapsToObject(String key) {
        switch (getFieldName(key)) {
            case "createdAt": return false;

            case "description": return false;

            case "id": return false;

            case "idempotencyKey": return false;

            case "price": return true;

            case "subscriptionLineItem": return true;

            default: return false;
        }
    }
}

