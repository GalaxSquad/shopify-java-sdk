// Generated from graphql_java_gen gem

package com.sdk.shopify.shopify;

import com.shopify.graphql.support.Arguments;
import com.shopify.graphql.support.Query;

/**
* A record of an execution of the subscription billing process. Billing attempts use
* idempotency keys to avoid duplicate order creation. A successful billing attempt
* will create an order.
*/
public class SubscriptionBillingAttemptQuery extends Query<SubscriptionBillingAttemptQuery> {
    SubscriptionBillingAttemptQuery(StringBuilder _queryBuilder) {
        super(_queryBuilder);

        startField("id");
    }

    /**
    * The date and time when the billing attempt was completed.
    */
    public SubscriptionBillingAttemptQuery completedAt() {
        startField("completedAt");

        return this;
    }

    /**
    * The date and time when the billing attempt was created.
    */
    public SubscriptionBillingAttemptQuery createdAt() {
        startField("createdAt");

        return this;
    }

    /**
    * A unique key generated by the client to avoid duplicate payments.
    */
    public SubscriptionBillingAttemptQuery idempotencyKey() {
        startField("idempotencyKey");

        return this;
    }

    /**
    * The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow.
    */
    public SubscriptionBillingAttemptQuery nextActionUrl() {
        startField("nextActionUrl");

        return this;
    }

    /**
    * The result of this billing attempt if completed successfully.
    */
    public SubscriptionBillingAttemptQuery order(OrderQueryDefinition queryDef) {
        startField("order");

        _queryBuilder.append('{');
        queryDef.define(new OrderQuery(_queryBuilder));
        _queryBuilder.append('}');

        return this;
    }

    /**
    * The date and time used to calculate fulfillment intervals for a billing attempt that
    * successfully completed after the current anchor date. To prevent fulfillment from being
    * pushed to the next anchor date, this field can override the billing attempt date.
    */
    public SubscriptionBillingAttemptQuery originTime() {
        startField("originTime");

        return this;
    }

    /**
    * The reference shared between retried payment attempts.
    */
    public SubscriptionBillingAttemptQuery paymentGroupId() {
        startField("paymentGroupId");

        return this;
    }

    /**
    * The reference shared between payment attempts with similar payment details.
    */
    public SubscriptionBillingAttemptQuery paymentSessionId() {
        startField("paymentSessionId");

        return this;
    }

    /**
    * Error information from processing the billing attempt.
    */
    public SubscriptionBillingAttemptQuery processingError(SubscriptionBillingAttemptProcessingErrorQueryDefinition queryDef) {
        startField("processingError");

        _queryBuilder.append('{');
        queryDef.define(new SubscriptionBillingAttemptProcessingErrorQuery(_queryBuilder));
        _queryBuilder.append('}');

        return this;
    }

    /**
    * Whether the billing attempt is still processing.
    */
    public SubscriptionBillingAttemptQuery ready() {
        startField("ready");

        return this;
    }

    /**
    * Whether the billing attempt respects the merchant's inventory policy.
    */
    public SubscriptionBillingAttemptQuery respectInventoryPolicy() {
        startField("respectInventoryPolicy");

        return this;
    }

    /**
    * The subscription contract.
    */
    public SubscriptionBillingAttemptQuery subscriptionContract(SubscriptionContractQueryDefinition queryDef) {
        startField("subscriptionContract");

        _queryBuilder.append('{');
        queryDef.define(new SubscriptionContractQuery(_queryBuilder));
        _queryBuilder.append('}');

        return this;
    }

    public class TransactionsArguments extends Arguments {
        TransactionsArguments(StringBuilder _queryBuilder) {
            super(_queryBuilder, true);
        }

        /**
        * The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
        */
        public TransactionsArguments first(Integer value) {
            if (value != null) {
                startArgument("first");
                _queryBuilder.append(value);
            }
            return this;
        }

        /**
        * The elements that come after the specified
        * [cursor](https://shopify.dev/api/usage/pagination-graphql).
        */
        public TransactionsArguments after(String value) {
            if (value != null) {
                startArgument("after");
                Query.appendQuotedString(_queryBuilder, value.toString());
            }
            return this;
        }

        /**
        * The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
        */
        public TransactionsArguments last(Integer value) {
            if (value != null) {
                startArgument("last");
                _queryBuilder.append(value);
            }
            return this;
        }

        /**
        * The elements that come before the specified
        * [cursor](https://shopify.dev/api/usage/pagination-graphql).
        */
        public TransactionsArguments before(String value) {
            if (value != null) {
                startArgument("before");
                Query.appendQuotedString(_queryBuilder, value.toString());
            }
            return this;
        }

        /**
        * Reverse the order of the underlying list.
        */
        public TransactionsArguments reverse(Boolean value) {
            if (value != null) {
                startArgument("reverse");
                _queryBuilder.append(value);
            }
            return this;
        }
    }

    public interface TransactionsArgumentsDefinition {
        void define(TransactionsArguments args);
    }

    /**
    * The transactions created by the billing attempt.
    */
    public SubscriptionBillingAttemptQuery transactions(OrderTransactionConnectionQueryDefinition queryDef) {
        return transactions(args -> {}, queryDef);
    }

    /**
    * The transactions created by the billing attempt.
    */
    public SubscriptionBillingAttemptQuery transactions(TransactionsArgumentsDefinition argsDef, OrderTransactionConnectionQueryDefinition queryDef) {
        startField("transactions");

        TransactionsArguments args = new TransactionsArguments(_queryBuilder);
        argsDef.define(args);
        TransactionsArguments.end(args);

        _queryBuilder.append('{');
        queryDef.define(new OrderTransactionConnectionQuery(_queryBuilder));
        _queryBuilder.append('}');

        return this;
    }
}
